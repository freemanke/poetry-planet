// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoetryPlanet.Web.Data;

#nullable disable

namespace PoetryPlanet.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250312101216_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaiduWiki")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("baidu_wiki");

                    b.Property<string>("BirthYear")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("birth_year");

                    b.Property<string>("DeathYear")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("death_year");

                    b.Property<string>("Dynasty")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dynasty");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro");

                    b.Property<string>("IntroTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro_tr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name_tr");

                    b.Property<int>("QuotesCount")
                        .HasColumnType("int")
                        .HasColumnName("quotes_count");

                    b.Property<string>("RemoteId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remote_id");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("updated_at");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int")
                        .HasColumnName("views_count");

                    b.Property<int>("WorksCiCount")
                        .HasColumnType("int")
                        .HasColumnName("works_ci_count");

                    b.Property<int>("WorksCount")
                        .HasColumnType("int")
                        .HasColumnName("works_count");

                    b.Property<int>("WorksFuCount")
                        .HasColumnType("int")
                        .HasColumnName("works_fu_count");

                    b.Property<int>("WorksQuCount")
                        .HasColumnType("int")
                        .HasColumnName("works_qu_count");

                    b.Property<int>("WorksShiCount")
                        .HasColumnType("int")
                        .HasColumnName("works_shi_count");

                    b.Property<int>("WorksWenCount")
                        .HasColumnType("int")
                        .HasColumnName("works_wen_count");

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cover")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cover");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("desc");

                    b.Property<string>("DescTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("desc_tr");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind");

                    b.Property<int>("KindId")
                        .HasColumnType("int")
                        .HasColumnName("kind_id");

                    b.Property<string>("KindTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind_tr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name_tr");

                    b.Property<int>("OnlineData")
                        .HasColumnType("int")
                        .HasColumnName("online_data");

                    b.Property<int>("QuotesCount")
                        .HasColumnType("int")
                        .HasColumnName("quotes_count");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_desc");

                    b.Property<string>("ShortDescTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_desc_tr");

                    b.Property<int>("ShowOrder")
                        .HasColumnType("int")
                        .HasColumnName("show_order");

                    b.Property<int>("WorksCount")
                        .HasColumnType("int")
                        .HasColumnName("works_count");

                    b.HasKey("Id");

                    b.ToTable("collections");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.CollectionKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Limit")
                        .HasColumnType("int")
                        .HasColumnName("limit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name_tr");

                    b.Property<int>("ShowOrder")
                        .HasColumnType("int")
                        .HasColumnName("show_order");

                    b.HasKey("Id");

                    b.ToTable("collection_kinds");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.CollectionQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<int>("CollectionKindId")
                        .HasColumnType("int")
                        .HasColumnName("collection_kind_id");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote");

                    b.Property<string>("QuoteAuthor")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_author");

                    b.Property<string>("QuoteAuthorTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_author_tr");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int")
                        .HasColumnName("quote_id");

                    b.Property<string>("QuoteTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_tr");

                    b.Property<string>("QuoteWork")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_work");

                    b.Property<int>("QuoteWorkId")
                        .HasColumnType("int")
                        .HasColumnName("quote_work_id");

                    b.Property<string>("QuoteWorkTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_work_tr");

                    b.Property<int>("ShowOrder")
                        .HasColumnType("int")
                        .HasColumnName("show_order");

                    b.HasKey("Id");

                    b.ToTable("collection_quotes");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.CollectionWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Collection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("collection");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int")
                        .HasColumnName("collection_id");

                    b.Property<string>("CollectionTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("collection_tr");

                    b.Property<int>("ShowOrder")
                        .HasColumnType("int")
                        .HasColumnName("show_order");

                    b.Property<string>("WorkAuthor")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_author");

                    b.Property<string>("WorkAuthorTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_author_tr");

                    b.Property<string>("WorkContent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_content");

                    b.Property<string>("WorkContentTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_content_tr");

                    b.Property<string>("WorkDynasty")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_dynasty");

                    b.Property<string>("WorkDynastyTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_dynasty_tr");

                    b.Property<string>("WorkFullTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_full_title");

                    b.Property<string>("WorkFullTitleTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_full_title_tr");

                    b.Property<int>("WorkId")
                        .HasColumnType("int")
                        .HasColumnName("work_id");

                    b.Property<string>("WorkKind")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_kind");

                    b.Property<string>("WorkTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_title");

                    b.Property<string>("WorkTitleTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_title_tr");

                    b.HasKey("Id");

                    b.ToTable("collection_works");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.Dynasty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("end_year");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro");

                    b.Property<string>("IntroTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro_tr");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name_tr");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("start_year");

                    b.HasKey("Id");

                    b.ToTable("dynasties");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author_tr");

                    b.Property<string>("Dynasty")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dynasty");

                    b.Property<string>("DynastyTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dynasty_tr");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind");

                    b.Property<string>("QuoteText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote");

                    b.Property<string>("QuoteTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("quote_tr");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("updated_at");

                    b.Property<int>("WorkId")
                        .HasColumnType("int")
                        .HasColumnName("work_id");

                    b.Property<string>("WorkTitle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_title");

                    b.Property<string>("WorkTitleTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("work_title_tr");

                    b.HasKey("Id");

                    b.ToTable("quotes");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.UserFavoriteWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.Property<int>("WorkId")
                        .HasColumnType("int")
                        .HasColumnName("work_id");

                    b.HasKey("Id");

                    b.ToTable("UserFavoriteWorks");
                });

            modelBuilder.Entity("PoetryPlanet.Web.Data.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("annotation");

                    b.Property<string>("AnnotationTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("annotation_tr");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author");

                    b.Property<string>("AuthorDesc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author_desc");

                    b.Property<string>("AuthorDescTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author_desc_tr");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("AuthorRemoteId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author_remote_id");

                    b.Property<string>("AuthorTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("author_tr");

                    b.Property<int>("AuthorWorksCount")
                        .HasColumnType("int")
                        .HasColumnName("author_works_count");

                    b.Property<string>("BaiduWiki")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("baidu_wiki");

                    b.Property<int>("CollectionsCount")
                        .HasColumnType("int")
                        .HasColumnName("collections_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("ContentTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content_tr");

                    b.Property<string>("Dynasty")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dynasty");

                    b.Property<string>("DynastyTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("dynasty_tr");

                    b.Property<string>("Foreword")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("foreword");

                    b.Property<string>("ForewordTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("foreword_tr");

                    b.Property<int>("HighlightedAt")
                        .HasColumnType("int")
                        .HasColumnName("highlighted_at");

                    b.Property<string>("Intro")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro");

                    b.Property<string>("IntroTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("intro_tr");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind");

                    b.Property<string>("KindCn")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind_cn");

                    b.Property<string>("KindCnTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("kind_cn_tr");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("layout");

                    b.Property<string>("MasterComment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("master_comment");

                    b.Property<string>("MasterCommentTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("master_comment_tr");

                    b.Property<int>("PostsCount")
                        .HasColumnType("int")
                        .HasColumnName("posts_count");

                    b.Property<int>("QuotesCount")
                        .HasColumnType("int")
                        .HasColumnName("quotes_count");

                    b.Property<int>("ShowOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<string>("TitleTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title_tr");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("translation");

                    b.Property<string>("TranslationTr")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("translation_tr");

                    b.HasKey("Id");

                    b.ToTable("works");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PoetryPlanet.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PoetryPlanet.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoetryPlanet.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PoetryPlanet.Web.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
