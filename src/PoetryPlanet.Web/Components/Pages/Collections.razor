@attribute [Route(Consts.RouterCollections)]

@inject ApplicationDbContext Db

<PageTitle>诗集信息</PageTitle>

<RadzenStack AlignItems="AlignItems.End" Orientation="Orientation.Horizontal">
    <RadzenText TextStyle="TextStyle.H6" Text="诗集信息"></RadzenText>
</RadzenStack>

<RadzenRow>
    <RadzenColumn size="12">
        <RadzenButton @ref="button" Text="文体" Click="@(_ => popup!.ToggleAsync(button!.Element))" />
        <RadzenTextBox class="mb-2" @bind-Value="@keyword" Change="@UpdateAsync" Placeholder="搜索关键字..."></RadzenTextBox>
        <RadzenButton class="mb-2" Click="SearchAsync" Icon="search" Text=""></RadzenButton>
        <Popup Style="display: none;position: absolute;overflow: hidden; width: 600px" @ref="popup" Lazy="true" class="my-popup">
            <RadzenRow>
                <RadzenCard class="rounded-2">
                    <RadzenStack>
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenCheckBox TValue="bool" @bind-Value="@isAllKinds" Change="ToggleSelectAllKindsAsync"></RadzenCheckBox>
                            <RadzenLabel Text="@(isAllKinds ? "取消全选" : "全选")"></RadzenLabel>
                        </RadzenStack>
                        <RadzenStack>
                            <RadzenCheckBoxList Change="UpdateAsync" @bind-Value=@selectedKinds TValue="string">
                                <Items>
                                    @foreach (var kind in allCollectionKinds)
                                    {
                                        <RadzenCheckBoxListItem class="mb-2" Text="@kind" Value="@kind"/>
                                    }
                                </Items>
                            </RadzenCheckBoxList>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenRow>
        </Popup>
    </RadzenColumn>
</RadzenRow>

<RadzenRow class="mb-2">
    <RadzenColumn Size="12">
        <RadzenDataGrid class="rounded-2"
                        Data="@items" TItem="Collection"
                        PagerPosition="@PagerPosition.Bottom"
                        AllowPaging="true"
                        AllowColumnResize="true"
                        SelectionMode="DataGridSelectionMode.Single"
                        AllowRowSelectOnRowClick="true" PageSize="20" AllowSorting="true" @bind-Value="@selected">
            <Columns>
                <RadzenDataGridColumn TItem="Collection" Property="Name" Title="名称" Width="170px" />
                <RadzenDataGridColumn TItem="Collection" Property="Kind" Title="文体" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="Collection" Property="Desc" Title="描述" />
                <RadzenDataGridColumn TItem="Collection" Property="WorksCount" Title="诗词" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn TItem="Collection" Property="QuotesCount" Title="佳句" Width="80px" TextAlign="TextAlign.Center" />
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>

@code 
{
    private RadzenButton? button;
    private Popup? popup;
    private bool isAllKinds = true;
    IEnumerable<string> selectedKinds = [];
    private List<string> allCollectionKinds = [];
    IQueryable<Collection> items = new List<Collection>().AsQueryable();
    IList<Collection> selected = new List<Collection>();
    private string keyword = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpdateAsync();
        selectedKinds = allCollectionKinds;
    }

    private Task SearchAsync()
    {
        return UpdateAsync();
    }

    private async Task ToggleSelectAllKindsAsync()
    {
        selectedKinds = isAllKinds ? allCollectionKinds : [];
        await UpdateAsync();
    }
    
    private async Task UpdateAsync()
    {
        allCollectionKinds = await Db.Collections.OrderBy(a=>a.Id).Select(a => a.Kind).Distinct().ToListAsync();
        var query = Db.Collections.Where(a => a.Id > 0);
        if (!string.IsNullOrEmpty(keyword))
        {
            query = query.Where(a =>
                a.Name.Contains(keyword)
                || a.Kind.Contains(keyword)
                || a.Desc.Contains(keyword));
        }

        if (selectedKinds.Count() != 0)
        {
            query = query.Where(a => selectedKinds.Contains(a.Kind));
        }

        items = query.OrderBy(a => a.ShowOrder).AsQueryable();
        await Task.CompletedTask;
    }
}
